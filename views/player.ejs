<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .player-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 3rem 0;
            margin-bottom: 2rem;
        }
        .player-profile {
            display: flex;
            align-items: center;
            gap: 2rem;
        }
        .player-image {
            width: 120px;
            height: 120px;
            background: white;
            border-radius: 50%;
            padding: 0.5rem;
            overflow: hidden;
        }
        .player-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }
        .player-details h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        .player-meta {
            display: flex;
            gap: 1rem;
            opacity: 0.9;
        }
        .badge {
            background: rgba(255,255,255,0.2);
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
        }
        .stats-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: white;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
        }
        .summary-stat {
            text-align: center;
        }
        .summary-label {
            font-size: 0.75rem;
            color: var(--gray);
            text-transform: uppercase;
            margin-bottom: 0.25rem;
        }
        .summary-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
        }
        .charts-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }
        .chart-container {
            background: white;
            padding: 2rem;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
        }
        .chart-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            text-align: center;
        }
        .chart-canvas {
            max-width: 100%;
            height: 300px;
        }
        .season-tabs {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 2rem;
            background: white;
            padding: 0.5rem;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
        }
        .season-tab {
            flex: 1;
            padding: 0.75rem;
            background: transparent;
            border: none;
            border-radius: var(--radius);
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s;
        }
        .season-tab.active {
            background: var(--primary-color);
            color: white;
        }
        .no-data {
            text-align: center;
            padding: 3rem;
            color: var(--gray);
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <a href="/" style="text-decoration: none; color: inherit;">
                        <h1>Stat4Ballers</h1>
                        <span class="tagline">Football Statistics Hub</span>
                    </a>
                </div>
                <nav class="nav-links">
                    <a href="/league/ligue1">Ligue 1</a>
                    <a href="/league/premierleague">Premier League</a>
                    <a href="/league/laliga">La Liga</a>
                    <a href="/league/seriea">Serie A</a>
                    <a href="/league/bundesliga">Bundesliga</a>
                </nav>
            </div>
        </div>
    </header>

    <div class="player-header">
        <div class="container">
            <div class="player-profile">
                <div class="player-image">
                    <img src="/images/placeholder-player.png" alt="Player" id="player-image">
                </div>
                <div class="player-details">
                    <h1 id="player-name">Loading...</h1>
                    <div class="player-meta">
                        <span class="badge" id="player-position">Position</span>
                        <span class="badge" id="player-number">#-</span>
                        <span class="badge" id="player-team">Team</span>
                        <span class="badge" id="player-nationality">Nationality</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <main class="container">
        <div class="season-tabs">
            <button class="season-tab active" data-season="2025">2025/2026</button>
            <button class="season-tab" data-season="2024">2024/2025</button>
            <button class="season-tab" data-season="2023">2023/2024</button>
            <button class="season-tab" data-season="cumulative">3 Seasons Combined</button>
        </div>

        <div class="stats-summary">
            <div class="summary-stat">
                <div class="summary-label">Rating</div>
                <div class="summary-value" id="stat-rating">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label">Apps</div>
                <div class="summary-value" id="stat-appearances">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label">Goals</div>
                <div class="summary-value" id="stat-goals">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label">Assists</div>
                <div class="summary-value" id="stat-assists">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label">Minutes</div>
                <div class="summary-value" id="stat-minutes">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label">Yellow</div>
                <div class="summary-value" id="stat-yellow">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label">Red</div>
                <div class="summary-value" id="stat-red">-</div>
            </div>
        </div>

        <div class="charts-section" id="charts-section">
            <!-- Charts will be dynamically inserted here -->
        </div>
    </main>

    <script>
        const playerSlug = '<%= playerSlug %>';
        let playerData = null;
        let currentSeason = '2025';
        let charts = {};

        // Chart.js default options
        Chart.defaults.font.family = 'Inter, sans-serif';

        // Load player data
        async function loadPlayerData() {
            try {
                const response = await fetch(`/api/players/${playerSlug}`);
                const data = await response.json();

                if (data.success) {
                    playerData = data.data;
                    updatePlayerInfo(playerData);
                }

                // Load statistics
                const statsResponse = await fetch(`/api/players/${playerSlug}/statistics?season=${currentSeason}`);
                const statsData = await statsResponse.json();

                if (statsData.success) {
                    updateStatistics(statsData.data);
                }

                // Load radar data
                const radarResponse = await fetch(`/api/players/${playerSlug}/radar`);
                const radarData = await radarResponse.json();

                if (radarData.success) {
                    renderRadarCharts(radarData.data);
                }
            } catch (error) {
                console.error('Error loading player data:', error);
            }
        }

        function updatePlayerInfo(player) {
            document.getElementById('player-name').textContent = player.name || 'Player Name';
            document.getElementById('player-position').textContent = player.position || 'Position';
            document.getElementById('player-number').textContent = `#${player.jerseyNumber || '-'}`;
            document.getElementById('player-team').textContent = player.team?.name || 'Team';
            document.getElementById('player-nationality').textContent = player.nationality || 'Nationality';
            
            if (player.image) {
                document.getElementById('player-image').src = player.image;
            }
        }

        function updateStatistics(stats) {
            document.getElementById('stat-rating').textContent = stats.rating?.toFixed(1) || '-';
            document.getElementById('stat-appearances').textContent = stats.appearances || '-';
            document.getElementById('stat-goals').textContent = stats.goals || '-';
            document.getElementById('stat-assists').textContent = stats.assists || '-';
            document.getElementById('stat-minutes').textContent = stats.minutesPlayed || '-';
            document.getElementById('stat-yellow').textContent = stats.yellowCards || '-';
            document.getElementById('stat-red').textContent = stats.redCards || '-';
        }

        function renderRadarCharts(radarData) {
            const chartsSection = document.getElementById('charts-section');
            chartsSection.innerHTML = '';

            // Destroy existing charts
            Object.values(charts).forEach(chart => chart.destroy());
            charts = {};

            const isGoalkeeper = radarData.isGoalkeeper;
            const chartData = radarData.charts;

            if (isGoalkeeper) {
                // Goalkeeper charts
                if (chartData.general) {
                    createRadarChart('general', 'General Statistics', chartData.general, chartsSection);
                }
                if (chartData.goalkeeper) {
                    createRadarChart('goalkeeper', 'Goalkeeper Specific', chartData.goalkeeper, chartsSection);
                }
            } else {
                // Field player charts
                if (chartData.general) {
                    createRadarChart('general', 'General Statistics', chartData.general, chartsSection);
                }
                if (chartData.offensive) {
                    createRadarChart('offensive', 'Offensive Creativity', chartData.offensive, chartsSection);
                }
                if (chartData.defensive) {
                    createRadarChart('defensive', 'Defensive Commitment', chartData.defensive, chartsSection);
                }
            }
        }

        function createRadarChart(id, title, data, container) {
            const chartDiv = document.createElement('div');
            chartDiv.className = 'chart-container';
            chartDiv.innerHTML = `
                <h3 class="chart-title">${title}</h3>
                <canvas id="chart-${id}" class="chart-canvas"></canvas>
            `;
            container.appendChild(chartDiv);

            const ctx = document.getElementById(`chart-${id}`).getContext('2d');
            const labels = Object.keys(data).map(key => 
                key.replace(/([A-Z])/g, ' $1').trim().charAt(0).toUpperCase() + 
                key.replace(/([A-Z])/g, ' $1').trim().slice(1)
            );
            const values = Object.values(data);

            // Normalize values to 0-100 scale for better visualization
            const maxValue = Math.max(...values, 100);
            const normalizedValues = values.map(v => (v / maxValue) * 100);

            charts[id] = new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: title,
                        data: normalizedValues,
                        backgroundColor: 'rgba(37, 99, 235, 0.2)',
                        borderColor: 'rgba(37, 99, 235, 1)',
                        pointBackgroundColor: 'rgba(37, 99, 235, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(37, 99, 235, 1)',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const originalValue = values[context.dataIndex];
                                    return `${context.label}: ${originalValue}`;
                                }
                            }
                        }
                    },
                    scales: {
                        r: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                stepSize: 20,
                                display: false
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            },
                            pointLabels: {
                                font: {
                                    size: 11
                                }
                            }
                        }
                    }
                }
            });
        }

        // Season selector
        document.querySelectorAll('.season-tab').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.season-tab').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                currentSeason = e.target.dataset.season;
                loadPlayerData();
            });
        });

        // Load initial data
        loadPlayerData();
    </script>
</body>
</html>