<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        .player-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 3rem 0;
            margin-bottom: 2rem;
        }
        .player-profile {
            display: flex;
            align-items: center;
            gap: 2rem;
        }
        .player-image {
            width: 120px;
            height: 120px;
            background: white;
            border-radius: 50%;
            padding: 0.5rem;
            overflow: hidden;
        }
        .player-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }
        .player-details h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        .player-meta {
            display: flex;
            gap: 1rem;
            opacity: 0.9;
        }
        .badge {
            background: rgba(255,255,255,0.2);
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
        }
        .stats-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: white;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
        }
        .summary-stat {
            text-align: center;
        }
        .summary-label {
            font-size: 0.75rem;
            color: var(--gray);
            text-transform: uppercase;
            margin-bottom: 0.25rem;
        }
        .summary-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
        }
        .stats-list {
            background: white;
            padding: 2rem;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            margin-top: 2rem;
        }
        .stats-category {
            margin-bottom: 2rem;
        }
        .stats-category h3 {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--primary-color);
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 0.5rem;
        }
        .stat-item {
            display: flex;
            justify-content: space-between;
            padding: 0.75rem;
            border-bottom: 1px solid #f0f0f0;
        }
        .stat-item:last-child {
            border-bottom: none;
        }
        .stat-name {
            font-weight: 500;
            color: #333;
        }
        .stat-value {
            font-weight: 700;
            color: var(--primary-color);
        }
        .season-tabs {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 2rem;
            background: white;
            padding: 0.5rem;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
        }
        .season-tab {
            flex: 1;
            padding: 0.75rem;
            background: transparent;
            border: none;
            border-radius: var(--radius);
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s;
        }
        .season-tab.active {
            background: var(--primary-color);
            color: white;
        }
        .no-data {
            text-align: center;
            padding: 3rem;
            color: var(--gray);
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <a href="/" style="text-decoration: none; color: inherit;">
                        <h1 data-translate="Stat4Ballers">Stat4Ballers</h1>
                        <span class="tagline" data-translate="Football Statistics Hub">Football Statistics Hub</span>
                    </a>
                </div>
                <nav class="nav-links">
                    <a href="/league/ligue1" data-translate="Ligue 1">Ligue 1</a>
                    <a href="/league/premierleague" data-translate="Premier League">Premier League</a>
                    <a href="/league/laliga" data-translate="La Liga">La Liga</a>
                    <a href="/league/seriea" data-translate="Serie A">Serie A</a>
                    <a href="/league/bundesliga" data-translate="Bundesliga">Bundesliga</a>
                </nav>
            </div>
        </div>
    </header>

    <div class="player-header">
        <div class="container">
            <div class="player-profile">
                <div class="player-image">
                    <img src="/images/placeholder-player.png" alt="Player" id="player-image">
                </div>
                <div class="player-details">
                    <h1 id="player-name">Loading...</h1>
                    <div class="player-meta">
                        <span class="badge" id="player-position" data-translate="Position">Position</span>
                        <span class="badge" id="player-number">#-</span>
                        <span class="badge" id="player-team" data-translate="Team">Team</span>
                        <span class="badge" id="player-nationality" data-translate="Nationality">Nationality</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <main class="container">
        <div class="season-tabs">
            <button class="season-tab active" data-season="2025">2025/2026</button>
        </div>

        <div class="stats-summary">
            <div class="summary-stat">
                <div class="summary-label" data-translate="Rating">Rating</div>
                <div class="summary-value" id="stat-rating">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label" data-translate="Apps">Apps</div>
                <div class="summary-value" id="stat-appearances">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label" data-translate="Goals">Goals</div>
                <div class="summary-value" id="stat-goals">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label" data-translate="Assists">Assists</div>
                <div class="summary-value" id="stat-assists">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label" data-translate="Minutes">Minutes</div>
                <div class="summary-value" id="stat-minutes">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label" data-translate="Yellow">Yellow</div>
                <div class="summary-value" id="stat-yellow">-</div>
            </div>
            <div class="summary-stat">
                <div class="summary-label" data-translate="Red">Red</div>
                <div class="summary-value" id="stat-red">-</div>
            </div>
        </div>

        <div class="stats-list" id="stats-list">
            <!-- Statistics will be dynamically inserted here -->
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <p data-translate="Â© 2025 Stat4Ballers. Powered by true soccer lovers. For the people, by the people.">&copy; 2025 Stat4Ballers. Powered by true soccer lovers. For the people, by the people.</p>
                <div class="footer-links">
                    <a href="/about" data-translate="About">About</a>
                </div>
                <div class="language-selector">
                    <button class="lang-btn active" data-lang="en">ðŸ‡¬ðŸ‡§</button>
                    <button class="lang-btn" data-lang="fr">ðŸ‡«ðŸ‡·</button>
                    <button class="lang-btn" data-lang="es">ðŸ‡ªðŸ‡¸</button>
                    <button class="lang-btn" data-lang="pt">ðŸ‡µðŸ‡¹</button>
                </div>
            </div>
        </div>
    </footer>

    <script src="/js/translations.js"></script>
    <script src="/js/main.js"></script>
    <script>
        const playerSlug = '<%= playerSlug %>';
        let playerData = null;
        let currentSeason = '2025';

        // Load player data
        async function loadPlayerData() {
            try {
                const response = await fetch(`/api/players/${playerSlug}`);
                const data = await response.json();

                if (data.success) {
                    playerData = data.data;
                    updatePlayerInfo(playerData);
                }

                // Load statistics
                const statsResponse = await fetch(`/api/players/${playerSlug}/statistics?season=${currentSeason}`);
                const statsData = await statsResponse.json();

                if (statsData.success) {
                    updateStatistics(statsData.data);
                }

                // Load detailed statistics
                const detailsResponse = await fetch(`/api/players/${playerSlug}/radar`);
                const detailsData = await detailsResponse.json();

                if (detailsData.success) {
                    renderStatsList(detailsData.data);
                }
            } catch (error) {
                console.error('Error loading player data:', error);
            }
        }

        function updatePlayerInfo(player) {
            // Get current language
            const currentLang = localStorage.getItem('preferredLanguage') || 'en';

            document.getElementById('player-name').textContent = player.name || 'Player Name';

            // Translate position if translations are available
            let translatedPosition = player.position || 'Position';
            if (window.translations && window.translations[currentLang] && window.translations[currentLang][player.position]) {
                translatedPosition = window.translations[currentLang][player.position];
            }
            const positionElement = document.getElementById('player-position');
            positionElement.textContent = translatedPosition;
            positionElement.setAttribute('data-translate', player.position || 'Position');

            document.getElementById('player-number').textContent = `#${player.jerseyNumber || '-'}`;
            document.getElementById('player-team').textContent = player.team?.name || 'Team';
            document.getElementById('player-nationality').textContent = player.nationality || 'Nationality';

            if (player.image) {
                document.getElementById('player-image').src = player.image;
            }
        }

        function updateStatistics(stats) {
            document.getElementById('stat-rating').textContent = stats.rating?.toFixed(1) || '-';
            document.getElementById('stat-appearances').textContent = stats.appearances || '-';
            document.getElementById('stat-goals').textContent = stats.goals || '-';
            document.getElementById('stat-assists').textContent = stats.assists || '-';
            document.getElementById('stat-minutes').textContent = stats.minutesPlayed || '-';
            document.getElementById('stat-yellow').textContent = stats.yellowCards || '-';
            document.getElementById('stat-red').textContent = stats.redCards || '-';
        }

        function renderStatsList(statsData) {
            const statsListSection = document.getElementById('stats-list');
            statsListSection.innerHTML = '';

            const isGoalkeeper = statsData.isGoalkeeper;
            const position = statsData.position;
            const chartData = statsData.charts;

            if (isGoalkeeper) {
                // Goalkeeper statistics
                if (chartData.general) {
                    createStatCategory('General Statistics', chartData.general, statsListSection);
                }
                if (chartData.goalkeeper) {
                    createStatCategory('Goalkeeper Specific', chartData.goalkeeper, statsListSection);
                }
            } else {
                // Field player statistics
                const isDefender = position && (
                    position.toLowerCase().includes('defender') ||
                    position.toLowerCase().includes('back') ||
                    position.toLowerCase() === 'cb' ||
                    position.toLowerCase() === 'lb' ||
                    position.toLowerCase() === 'rb' ||
                    position.toLowerCase() === 'rwb' ||
                    position.toLowerCase() === 'lwb'
                );

                if (chartData.general) {
                    createStatCategory('General Statistics', chartData.general, statsListSection);
                }

                if (isDefender) {
                    // For defenders: Defensive first, then Offensive
                    if (chartData.defensive) {
                        createStatCategory('Defensive Commitment', chartData.defensive, statsListSection);
                    }
                    if (chartData.offensive) {
                        createStatCategory('Offensive Creativity', chartData.offensive, statsListSection);
                    }
                } else {
                    // For other players: Offensive first, then Defensive
                    if (chartData.offensive) {
                        createStatCategory('Offensive Creativity', chartData.offensive, statsListSection);
                    }
                    if (chartData.defensive) {
                        createStatCategory('Defensive Commitment', chartData.defensive, statsListSection);
                    }
                }
            }
        }

        function createStatCategory(title, data, container) {
            const categoryDiv = document.createElement('div');
            categoryDiv.className = 'stats-category';

            // Map of stat keys to display names
            const statLabels = {
                // General statistics
                rating: 'Rating',
                appearances: 'Appearances',
                minutesPlayed: 'Minutes played',
                captain: 'Captain',
                goals: 'Goals',
                assists: 'Assists',
                redCards: 'Red cards',
                // Offensive creativity
                shotsTotal: 'Shots total',
                shotsOnTarget: 'Shots on target',
                penalties: 'Penalties',
                hitWoodwork: 'Hit woodwork',
                keyPasses: 'Key passes',
                bigChancesCreated: 'Big chances created',
                accurateCrosses: 'Accurate crosses',
                successfulDribbles: 'Successful dribbles',
                // Defensive commitment
                yellowCards: 'Yellow cards',
                tackles: 'Tackles',
                ownGoals: 'Own goals',
                interceptions: 'Interceptions',
                duelsWon: 'Duels won',
                aerialsWon: 'Aerials won',
                dispossessed: 'Dispossessed',
                dribbledPast: 'Dribbled past',
                fouls: 'Fouls',
                foulsDrawn: 'Fouls drawn',
                errorLeadToGoal: 'Error lead to goal',
                // Goalkeeper specific
                saves: 'Saves',
                savesInsideBox: 'Saves inside box',
                goalsConceded: 'Goals conceded',
                cleanSheets: 'Clean sheets'
            };

            // Get current language
            const currentLang = localStorage.getItem('preferredLanguage') || 'en';

            // Translate title if needed
            const translatedTitle = window.translations && window.translations[currentLang] && window.translations[currentLang][title] ?
                window.translations[currentLang][title] : title;

            let statsHTML = `<h3 data-translate="${title}">${translatedTitle}</h3>`;

            for (const [key, value] of Object.entries(data)) {
                const statName = statLabels[key] || key;

                // Translate stat name if needed
                const translatedStatName = window.translations && window.translations[currentLang] && window.translations[currentLang][statName] ?
                    window.translations[currentLang][statName] : statName;

                statsHTML += `
                    <div class="stat-item">
                        <span class="stat-name" data-translate="${statName}">${translatedStatName}</span>
                        <span class="stat-value">${value !== null && value !== undefined ? value : '-'}</span>
                    </div>
                `;
            }

            categoryDiv.innerHTML = statsHTML;
            container.appendChild(categoryDiv);
        }

        // Season selector (keeping for potential future use, but currently only one season)
        document.querySelectorAll('.season-tab').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.season-tab').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                currentSeason = e.target.dataset.season;
                loadPlayerData();
            });
        });

        // Load initial data after translations are ready
        document.addEventListener('DOMContentLoaded', () => {
            // Wait a brief moment for translations to initialize
            setTimeout(() => {
                loadPlayerData();
            }, 100);
        });
    </script>
</body>
</html>