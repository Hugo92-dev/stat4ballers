<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        .team-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 3rem 0;
            margin-bottom: 2rem;
        }
        .team-info {
            display: flex;
            align-items: center;
            gap: 2rem;
        }
        .team-logo-large {
            width: 100px;
            height: 100px;
            background: white;
            border-radius: 50%;
            padding: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .team-logo-large img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
        .team-details h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        .team-meta {
            opacity: 0.9;
        }
        .stats-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: white;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
        }
        .stat-item {
            text-align: center;
            padding: 1rem;
            border-right: 1px solid var(--light-gray);
        }
        .stat-item:last-child {
            border-right: none;
        }
        .stat-label {
            font-size: 0.875rem;
            color: var(--gray);
            margin-bottom: 0.5rem;
        }
        .stat-value {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--primary-color);
        }
        .squad-section {
            background: white;
            padding: 2rem;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
        }
        .squad-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1.5rem;
        }
        .player-card {
            display: flex;
            align-items: center;
            padding: 1rem;
            background: var(--light-gray);
            border-radius: var(--radius);
            cursor: pointer;
            transition: all 0.3s;
            text-decoration: none;
            color: inherit;
        }
        .player-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }
        .player-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-right: 1rem;
            min-width: 30px;
            text-align: center;
        }
        .player-info {
            flex: 1;
        }
        .player-name {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }
        .player-position {
            font-size: 0.875rem;
            color: var(--gray);
        }
        .position-group {
            margin-bottom: 2rem;
        }
        .position-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--primary-color);
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <a href="/" style="text-decoration: none; color: inherit;">
                        <h1 data-translate="Stat4Ballers">Stat4Ballers</h1>
                        <span class="tagline" data-translate="Football Statistics Hub">Football Statistics Hub</span>
                    </a>
                </div>
                <nav class="nav-links">
                    <a href="/league/ligue1" data-translate="Ligue 1">Ligue 1</a>
                    <a href="/league/premierleague" data-translate="Premier League">Premier League</a>
                    <a href="/league/laliga" data-translate="La Liga">La Liga</a>
                    <a href="/league/seriea" data-translate="Serie A">Serie A</a>
                    <a href="/league/bundesliga" data-translate="Bundesliga">Bundesliga</a>
                </nav>
            </div>
        </div>
    </header>

    <div class="team-header">
        <div class="container">
            <div class="team-info">
                <div class="team-logo-large">
                    <img src="/images/placeholder-team.png" alt="Team Logo" id="team-logo">
                </div>
                <div class="team-details">
                    <h1 id="team-name">Loading...</h1>
                    <div class="team-meta">
                        <span id="team-stadium">Stadium</span> â€¢ 
                        <span id="team-founded">Founded</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <main class="container">
        <div class="squad-section">
            <h2 data-translate="Squad">Squad</h2>
            
            <div class="position-group">
                <h3 class="position-title" data-translate="Goalkeepers">Goalkeepers</h3>
                <div class="squad-grid" id="goalkeepers">
                    <div class="player-card">
                        <div class="player-number">-</div>
                        <div class="player-info">
                            <div class="player-name" data-translate="Loading squad...">Loading squad...</div>
                            <div class="player-position" data-translate="Goalkeeper">Goalkeeper</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="position-group">
                <h3 class="position-title" data-translate="Defenders">Defenders</h3>
                <div class="squad-grid" id="defenders"></div>
            </div>

            <div class="position-group">
                <h3 class="position-title" data-translate="Midfielders">Midfielders</h3>
                <div class="squad-grid" id="midfielders"></div>
            </div>

            <div class="position-group">
                <h3 class="position-title" data-translate="Forwards">Forwards</h3>
                <div class="squad-grid" id="forwards"></div>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <p data-translate="Â© 2025 Stat4Ballers. Powered by true soccer lovers. For the people, by the people.">&copy; 2025 Stat4Ballers. Powered by true soccer lovers. For the people, by the people.</p>
                <div class="footer-links">
                    <a href="/about" data-translate="About">About</a>
                </div>
                <div class="language-selector">
                    <button class="lang-btn active" data-lang="en">ðŸ‡¬ðŸ‡§</button>
                    <button class="lang-btn" data-lang="fr">ðŸ‡«ðŸ‡·</button>
                    <button class="lang-btn" data-lang="es">ðŸ‡ªðŸ‡¸</button>
                    <button class="lang-btn" data-lang="pt">ðŸ‡µðŸ‡¹</button>
                </div>
            </div>
        </div>
    </footer>

    <script src="/js/translations.js"></script>
    <script>
        const teamSlug = '<%= teamSlug %>';

        // Load team data
        async function loadTeamData() {
            try {
                const response = await fetch(`/api/teams/${teamSlug}`);
                const data = await response.json();
                
                if (data.success) {
                    updateTeamInfo(data.data);
                }

                // Load statistics
                const statsResponse = await fetch(`/api/teams/${teamSlug}/statistics`);
                const statsData = await statsResponse.json();
                
                if (statsData.success) {
                    updateStatistics(statsData.data);
                }

                // Load squad
                const squadResponse = await fetch(`/api/teams/${teamSlug}/squad`);
                const squadData = await squadResponse.json();
                
                if (squadData.success) {
                    updateSquad(squadData.data);
                }
            } catch (error) {
                console.error('Error loading team data:', error);
            }
        }

        function updateTeamInfo(team) {
            document.getElementById('team-name').textContent = team.name || 'Team Name';
            document.getElementById('team-stadium').textContent = team.venue?.name || 'Stadium';

            // Get current language and translate "Founded"
            const currentLang = localStorage.getItem('preferredLanguage') || 'en';
            const foundedText = window.translations && window.translations[currentLang] && window.translations[currentLang]['Founded'] ?
                window.translations[currentLang]['Founded'] : 'Founded';
            document.getElementById('team-founded').innerHTML = `<span data-translate="Founded">${foundedText}</span> ${team.founded || 'N/A'}`;

            if (team.logo) {
                document.getElementById('team-logo').src = team.logo;
            }
        }

        function updateStatistics(stats) {
            document.getElementById('stat-rating').textContent = stats.rating?.toFixed(1) || '-';
            document.getElementById('stat-games').textContent = stats.gamesPlayed || '-';
            document.getElementById('stat-wins').textContent = stats.teamWins || '-';
            document.getElementById('stat-draws').textContent = stats.teamDraws || '-';
            document.getElementById('stat-losses').textContent = stats.teamLost || '-';
            document.getElementById('stat-goals').textContent = stats.goalsScored || '-';
            document.getElementById('stat-cleansheets').textContent = stats.cleanSheets || '-';
            document.getElementById('stat-avgage').textContent = stats.averagePlayerAge?.toFixed(1) || '-';
        }

        function updateSquad(players) {
            // Group players by position
            const positions = {
                goalkeepers: [],
                defenders: [],
                midfielders: [],
                forwards: []
            };

            // Group players by their position
            if (Array.isArray(players)) {
                players.forEach(player => {
                    const pos = (player.position || '').toLowerCase();
                    if (pos.includes('goalkeeper') || pos === 'goalkeeper' || player.isGoalkeeper) {
                        positions.goalkeepers.push(player);
                    } else if (pos.includes('defender') || pos === 'defender') {
                        positions.defenders.push(player);
                    } else if (pos.includes('midfielder')) {
                        positions.midfielders.push(player);
                    } else if (pos.includes('forward') || pos.includes('attacker')) {
                        positions.forwards.push(player);
                    } else {
                        positions.midfielders.push(player);
                    }
                });
            }

            // Create player cards HTML with translations
            const createPlayerCard = (player) => {
                // Get current language
                const currentLang = localStorage.getItem('preferredLanguage') || 'en';

                // Translate position if translations are available
                let translatedPosition = player.position || 'Unknown';
                if (window.translations && window.translations[currentLang] && window.translations[currentLang][player.position]) {
                    translatedPosition = window.translations[currentLang][player.position];
                }

                return `
                    <a href="/player/${player.slug || 'unknown'}" class="player-card">
                        <div class="player-number">${player.jerseyNumber || '-'}</div>
                        ${player.image ? `<img src="${player.image}" alt="${player.name}" style="width: 40px; height: 40px; border-radius: 50%; margin: 0 0.5rem; object-fit: cover;">` : ''}
                        <div class="player-info">
                            <div class="player-name">${player.name || 'Unknown'}</div>
                            <div class="player-position" data-translate="${player.position}">${translatedPosition}</div>
                        </div>
                    </a>
                `;
            };

            // Update each position section
            document.getElementById('goalkeepers').innerHTML = positions.goalkeepers.length > 0 
                ? positions.goalkeepers.map(createPlayerCard).join('') 
                : '<p style="color: #999;">Aucun gardien</p>';
                
            document.getElementById('defenders').innerHTML = positions.defenders.length > 0 
                ? positions.defenders.map(createPlayerCard).join('') 
                : '<p style="color: #999;">Aucun dÃ©fenseur</p>';
                
            document.getElementById('midfielders').innerHTML = positions.midfielders.length > 0 
                ? positions.midfielders.map(createPlayerCard).join('') 
                : '<p style="color: #999;">Aucun milieu</p>';
                
            document.getElementById('forwards').innerHTML = positions.forwards.length > 0 
                ? positions.forwards.map(createPlayerCard).join('') 
                : '<p style="color: #999;">Aucun attaquant</p>';
        }

        // Load data on page load after translations are ready
        document.addEventListener('DOMContentLoaded', () => {
            // Wait a brief moment for translations to initialize
            setTimeout(() => {
                loadTeamData();
            }, 100);
        });
    </script>
</body>
</html>